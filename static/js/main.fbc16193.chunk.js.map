{"version":3,"sources":["components/ModalAddWord/ModalAddWord.js","components/ColorModeSwitcher/ColorModeSwitcher.js","components/Navbar/styles.js","components/Navbar/Navbar.js","components/Card/Card.js","components/Slider/Slider.js","components/theme/theme.js","styles.js","App.js","utils/useLocalStorageState.js","reportWebVitals.js","index.js"],"names":["ModalAddWord","isOpen","onClose","onOpen","setSlidesData","slidesData","toast","useToast","useState","word","definition","example","values","setValues","handleChange","e","id","target","value","console","log","size","style","borderRadius","mb","onSubmit","preventDefault","copySlidesData","unshift","title","description","status","duration","isClosable","spacing","htmlFor","onChange","placeholder","isRequired","colorScheme","type","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","fontSize","aria-label","variant","color","marginLeft","onClick","icon","StyledNavbar","styled","div","Navbar","p","textAlign","maxW","ml","fontWeight","Card","data","borderWidth","rounded","textTransform","phonetic","mt","borderBottom","borderColor","mx","variants","enter","direction","x","opacity","center","zIndex","exit","Slider","page","setPage","slideIndex","wrap","length","paginate","newDirection","position","h","initial","custom","animate","transition","stiffness","damping","drag","dragConstraints","left","right","dragElastic","onDragEnd","offset","velocity","swipe","Math","abs","swipePower","className","m","theme","extendTheme","fonts","body","heading","fontSizes","xs","sm","md","lg","xl","fontWeights","hairline","thin","light","normal","medium","semibold","bold","extrabold","black","StyledApp","App","useDisclosure","key","defaultValue","serialize","JSON","stringify","deserialize","parse","React","valueInLocalStorage","window","localStorage","getItem","error","removeItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","setItem","useLocalStorageState","display","justifyContent","bgColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbc16193.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  Stack,\n  Textarea,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  useToast,\n} from '@chakra-ui/react';\n\nexport const ModalAddWord = ({\n  isOpen,\n  onOpen,\n  onClose,\n  setSlidesData,\n  slidesData,\n}) => {\n  const toast = useToast();\n  const [values, setValues] = useState({\n    word: '',\n    definition: '',\n    example: '',\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    const copySlidesData = slidesData;\n    // move entry to beginning of array\n    copySlidesData.unshift(values);\n\n    // Not sure why but have to spread array for it to\n    // be stored in local storage\n    setSlidesData([...copySlidesData]);\n    setValues({\n      word: '',\n      definition: '',\n      example: '',\n    });\n    onClose();\n    toast({\n      title: `${values.word} was added!`,\n      description: `${values.word} was added to the Bro Dictionary`,\n      status: 'success',\n      duration: 9000,\n      isClosable: true,\n    });\n  };\n  const handleChange = e => {\n    const id = e.target.id;\n    const value = e.target.value;\n    setValues({\n      ...values,\n      [id]: value,\n    });\n    console.log('values', values);\n  };\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent style={{ borderRadius: '0.5rem' }}>\n          <ModalHeader>Add Bro-word</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody mb={5}>\n            <form onSubmit={handleSubmit}>\n              <Stack spacing={3}>\n                <FormControl>\n                  <FormLabel htmlFor=\"word\">Bro-word</FormLabel>\n                  <Input\n                    id=\"word\"\n                    value={values.word}\n                    onChange={handleChange}\n                    placeholder=\"Enter the bro-word\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Must contain the word \"bro\"\n                  </FormHelperText>\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"definition\">Definition</FormLabel>\n                  <Input\n                    id=\"definition\"\n                    value={values.definition}\n                    onChange={handleChange}\n                    placeholder=\"Enter the definition\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Define your word (what is it?)\n                  </FormHelperText>\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"example\">Example</FormLabel>\n                  <Textarea\n                    id=\"example\"\n                    value={values.example}\n                    onChange={handleChange}\n                    placeholder=\"Write an example on how to use your bro-word\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Give an example of your bro-word out in the wild\n                  </FormHelperText>\n                </FormControl>\n                <Button colorScheme=\"teal\" type=\"submit\">\n                  Submit\n                </Button>\n              </Stack>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledNavbar = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  left: 0;\n  top: 0;\n`;\n","import React from 'react';\n\nimport { Text, Box } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\n\n// Styles\nimport { StyledNavbar } from './styles';\n\nexport const Navbar = () => (\n  <StyledNavbar>\n    <Box p={3} textAlign=\"center\" maxW=\"sm\" ml=\"auto\">\n      <Text fontSize=\"3xl\" fontWeight=\"black\" mb={3}>\n        The Bro Dictionary\n      </Text>\n      <Text color=\"gray.400\" fontSize=\"md\">\n        A collection of brocabulary to use when you're checking on your bros.\n      </Text>\n    </Box>\n    <ColorModeSwitcher ml=\"auto\" mb=\"auto\" />\n  </StyledNavbar>\n);\n","import React from 'react';\n\nimport { Text, Box } from '@chakra-ui/react';\n\nexport const Card = ({\n  data = { word: 'Word', definition: 'Definition', example: 'Example' },\n}) => {\n  return (\n    <Box borderWidth=\"1px\" rounded=\"lg\" p={[6, 6, 12]} textAlign=\"center\">\n      <Text\n        style={{ textTransform: 'capitalize' }}\n        fontSize={['3xl', '4xl', '6xl']}\n        fontWeight=\"black\"\n        mb={3}\n      >\n        {data.word}\n      </Text>\n      <Text color=\"gray.400\" fontSize={['lg', 'xl', '2xl']} mb={3}>\n        <em>/ {data.phonetic} /</em>\n      </Text>\n      <Text fontSize={['lg', 'xl', '2xl']} mb={3}>\n        {data.definition}\n      </Text>\n      <Box\n        mt={[4, 9]}\n        mb={[4, 9]}\n        borderBottom=\"1px\"\n        borderColor=\"gray.200\"\n        maxW=\"425px\"\n        mx=\"auto\"\n      />\n      <Text\n        color=\"gray.400\"\n        textTransform=\"uppercase\"\n        fontWeight=\"bold\"\n        fontSize=\"sm\"\n        mb={3}\n      >\n        <em>Example</em>\n      </Text>\n      <Text fontWeight=\"bold\" fontSize={['lg', 'lg', '2xl']}>\n        <em>\"{data.example}\"</em>\n      </Text>\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { wrap } from 'popmotion';\n\nimport { Box } from '@chakra-ui/react';\n\nimport './styles.css';\nimport { Card } from '../Card';\n\n// Content\nimport data from '../../content.json';\n\nconst variants = {\n  enter: direction => {\n    return {\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0,\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n  exit: direction => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0,\n    };\n  },\n};\n\n/**\n * Experimenting with distilling swipe offset and velocity into a single variable, so the\n * less distance a user has swiped, the more velocity they need to register as a swipe.\n * Should accomodate longer swipes and short flicks without having binary checks on\n * just distance thresholds and velocity > 0.\n */\nconst swipeConfidenceThreshold = 10000;\nconst swipePower = (offset, velocity) => {\n  return Math.abs(offset) * velocity;\n};\n\nexport const Slider = ({ slidesData = data }) => {\n  const [[page, direction], setPage] = useState([0, 0]);\n  console.log('slidesData', slidesData);\n  console.log('data', data);\n  // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and\n  // then wrap that within 0-2 to find our image ID in the array below. By passing an\n  // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will\n  // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.\n  const slideIndex = wrap(0, slidesData.length, page);\n\n  const paginate = newDirection => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  return (\n    <Box position=\"relative\" h=\"480px\">\n      <AnimatePresence initial={false} custom={direction}>\n        <motion.div\n          key={page}\n          custom={direction}\n          variants={variants}\n          initial=\"enter\"\n          animate=\"center\"\n          exit=\"exit\"\n          transition={{\n            x: { type: 'spring', stiffness: 300, damping: 30 },\n            opacity: { duration: 0.2 },\n          }}\n          drag=\"x\"\n          dragConstraints={{ left: 0, right: 0 }}\n          dragElastic={1}\n          onDragEnd={(e, { offset, velocity }) => {\n            const swipe = swipePower(offset.x, velocity.x);\n\n            if (swipe < -swipeConfidenceThreshold) {\n              paginate(1);\n            } else if (swipe > swipeConfidenceThreshold) {\n              paginate(-1);\n            }\n          }}\n          className=\"slide\"\n        >\n          <Box maxW={['90%', '720px']} m=\"0 auto\">\n            <Card data={slidesData[slideIndex]} />\n          </Box>\n        </motion.div>\n      </AnimatePresence>\n    </Box>\n  );\n};\n","// 1. Import `extendTheme`\nimport { extendTheme } from '@chakra-ui/react';\n\n// 2. Call `extendTheme` and pass your custom values\nexport const theme = extendTheme({\n  fonts: {\n    body: 'Roboto, sans-serif',\n    heading: 'Roboto, sans-serif',\n  },\n  fontSizes: {\n    xs: '12px',\n    sm: '14px',\n    md: '16px',\n    lg: '18px',\n    xl: '20px',\n    '2xl': '24px',\n    '3xl': '28px',\n    '4xl': '36px',\n    '5xl': '48px',\n    '6xl': '64px',\n  },\n  fontWeights: {\n    hairline: 100,\n    thin: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700,\n    extrabold: 800,\n    black: 900,\n  },\n});\n","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  /* height: 100vh;\n  position: relative; */\n  display: flex;\n  align-items: center;\n  height: 100vh;\n\n  > div {\n    flex: 0 0 100%;\n    width: 100%;\n  }\n`;\n","import React from 'react';\n\nimport { Button, Box, useDisclosure, ChakraProvider } from '@chakra-ui/react';\n\n// Components\nimport { ModalAddWord, Navbar, Slider, theme } from './components';\n\n// Utils\nimport { useLocalStorageState } from './utils';\n\n// Styles\nimport { StyledApp } from './styles';\n\n// Content\nimport data from './content.json';\n\nfunction App(props) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [slidesData, setSlidesData] = useLocalStorageState('slides-data', data);\n  console.log('slidesData', typeof slidesData, slidesData);\n  return (\n    <ChakraProvider theme={theme}>\n      <StyledApp {...props}>\n        <Navbar />\n        <Box>\n          <Slider slidesData={slidesData} />\n          <Box display=\"flex\" justifyContent=\"center\">\n            <Button color=\"white\" bgColor=\"gray.700\" onClick={onOpen} size=\"lg\">\n              Add\n            </Button>\n            <Button ml={1} color=\"white\" bgColor=\"gray.700\" size=\"lg\">\n              Copy\n            </Button>\n          </Box>\n        </Box>\n        <ModalAddWord\n          isOpen={isOpen}\n          onClose={onClose}\n          setSlidesData={setSlidesData}\n          slidesData={slidesData}\n        />\n      </StyledApp>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nexport function useLocalStorageState(\n  key,\n  defaultValue = '',\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {}\n) {\n  const [state, setState] = React.useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    if (valueInLocalStorage) {\n      // the try/catch is here in case the localStorage value was set before\n      // we had the serialization in place (like we do in previous extra credits)\n      try {\n        return deserialize(valueInLocalStorage);\n      } catch (error) {\n        window.localStorage.removeItem(key);\n      }\n    }\n    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n  });\n\n  const prevKeyRef = React.useRef(key);\n\n  React.useEffect(() => {\n    const prevKey = prevKeyRef.current;\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey);\n    }\n    prevKeyRef.current = key;\n    window.localStorage.setItem(key, serialize(state));\n  }, [key, state, serialize]);\n\n  return [state, setState];\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ColorModeScript } from '@chakra-ui/react';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}