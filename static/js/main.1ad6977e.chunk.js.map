{"version":3,"sources":["components/ModalAddWord/ModalAddWord.js","components/ColorModeSwitcher/ColorModeSwitcher.js","components/Navbar/styles.js","components/Navbar/Navbar.js","components/Card/Card.js","components/Carousel/Carousel.js","styles.js","App.js","utils/useLocalStorageState.js","reportWebVitals.js","index.js"],"names":["ModalAddWord","isOpen","onClose","onOpen","setSlidesData","slidesData","toast","useToast","useState","word","definition","example","values","setValues","handleChange","e","id","target","value","console","log","size","style","borderRadius","mb","onSubmit","preventDefault","copySlidesData","unshift","title","description","status","duration","isClosable","spacing","htmlFor","onChange","placeholder","isRequired","colorScheme","type","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","fontSize","aria-label","variant","color","marginLeft","onClick","icon","StyledNavbar","styled","div","Navbar","p","fontWeight","justifySelf","Card","data","borderWidth","rounded","m","textTransform","Carousel","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","centerMode","lazyLoad","responsive","breakpoint","settings","map","slideData","i","StyledApp","App","useDisclosure","key","defaultValue","serialize","JSON","stringify","deserialize","parse","React","valueInLocalStorage","window","localStorage","getItem","error","removeItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","setItem","useLocalStorageState","theme","display","justifyContent","isDisabled","ml","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ad6977e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  Stack,\n  Textarea,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  useToast,\n} from '@chakra-ui/react';\n\nexport const ModalAddWord = ({\n  isOpen,\n  onOpen,\n  onClose,\n  setSlidesData,\n  slidesData,\n}) => {\n  const toast = useToast();\n  const [values, setValues] = useState({\n    word: '',\n    definition: '',\n    example: '',\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    const copySlidesData = slidesData;\n    // move entry to beginning of array\n    copySlidesData.unshift(values);\n    setSlidesData(copySlidesData);\n    setValues({\n      word: '',\n      definition: '',\n      example: '',\n    });\n    onClose();\n    toast({\n      title: `${values.word} was added!`,\n      description: `${values.word} was added to the Bro Dictionary`,\n      status: 'success',\n      duration: 9000,\n      isClosable: true,\n    });\n  };\n  const handleChange = e => {\n    const id = e.target.id;\n    const value = e.target.value;\n    setValues({\n      ...values,\n      [id]: value,\n    });\n    console.log('values', values);\n  };\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent style={{ borderRadius: '0.5rem' }}>\n          <ModalHeader>Add Bro-word</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody mb={5}>\n            <form onSubmit={handleSubmit}>\n              <Stack spacing={3}>\n                <FormControl>\n                  <FormLabel htmlFor=\"word\">Bro-word</FormLabel>\n                  <Input\n                    id=\"word\"\n                    value={values.word}\n                    onChange={handleChange}\n                    placeholder=\"Enter the bro-word\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Must contain the word \"bro\"\n                  </FormHelperText>\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"definition\">Definition</FormLabel>\n                  <Input\n                    id=\"definition\"\n                    value={values.definition}\n                    onChange={handleChange}\n                    placeholder=\"Enter the definition\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Define your word (what is it?)\n                  </FormHelperText>\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"example\">Example</FormLabel>\n                  <Textarea\n                    id=\"example\"\n                    value={values.example}\n                    onChange={handleChange}\n                    placeholder=\"Write an example on how to use your bro-word\"\n                    size=\"lg\"\n                    isRequired\n                  />\n                  <FormHelperText id=\"word-helper-text\">\n                    Give an example of your bro-word out in the wild\n                  </FormHelperText>\n                </FormControl>\n                <Button colorScheme=\"teal\" type=\"submit\">\n                  Submit\n                </Button>\n              </Stack>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledNavbar = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  left: 0;\n  top: 0;\n`;\n","import React from 'react';\n\nimport { Text, Box } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\n\n// Styles\nimport { StyledNavbar } from './styles';\n\nexport const Navbar = () => (\n  <StyledNavbar>\n    <Box p={3}>\n      <Text fontSize=\"3xl\" fontWeight=\"bold\">\n        The Bro Dictionary\n      </Text>\n      <Text>\n        A collection of brocabulary to use when you're checking on your bros.\n      </Text>\n      <ColorModeSwitcher justifySelf=\"flex-end\" />\n    </Box>\n  </StyledNavbar>\n);\n","import React from 'react';\n\nimport { Text, Box } from '@chakra-ui/react';\n\nexport const Card = ({ data }) => {\n  return (\n    <Box borderWidth=\"1px\" rounded=\"lg\" p={[3, 4, 12]} m={[3, 4, 12]}>\n      <Text\n        style={{ textTransform: 'capitalize' }}\n        fontSize={['2xl', '2xl', '5xl']}\n        fontWeight=\"bold\"\n        mb={2}\n      >\n        {data.word}\n      </Text>\n      <Text fontSize={['xl', 'xl', '3xl']} mb={3}>\n        {data.definition}\n      </Text>\n      <Text fontSize={['md', 'md', '2xl']}>\n        <strong>Example:</strong> <em>\"{data.example}\"</em>\n      </Text>\n    </Box>\n  );\n};\n","import React from 'react';\nimport Slider from 'react-slick';\n\nimport { Card } from '../Card';\n\nexport const Carousel = ({ slidesData }) => {\n  const settings = {\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    arrows: true,\n    // fade: true,\n    centerMode: true,\n    lazyLoad: true,\n    // nextArrow: <Button colorScheme=\"teal\" size=\"lg\" children=\"Next\" />,\n    // prevArrow: <Button colorScheme=\"teal\" size=\"lg\" children=\"Previous\" />,\n    responsive: [\n      {\n        breakpoint: 767,\n        settings: {\n          centerMode: false,\n          arrows: false,\n        },\n      },\n    ],\n  };\n  return (\n    <Slider {...settings}>\n      {slidesData.map((slideData, i) => {\n        return (\n          <div key={i}>\n            <Card data={slideData} />\n          </div>\n        );\n      })}\n    </Slider>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledApp = styled.div`\n  /* height: 100vh;\n  position: relative; */\n  display: flex;\n  align-items: center;\n  height: 100vh;\n\n  > div {\n    flex: 0 0 100%;\n    width: 100%;\n  }\n\n  .slick-prev,\n  .slick-next {\n    background-color: #319795;\n    width: 3rem;\n    height: 3rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 3rem;\n    z-index: 1;\n  }\n  .slick-next {\n    right: 2rem;\n  }\n  .slick-prev {\n    left: 2rem;\n  }\n`;\n","import React from 'react';\n\nimport {\n  Button,\n  Box,\n  useDisclosure,\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\n\n// Components\nimport { ModalAddWord, Navbar, Carousel } from './components';\n\n// Utils\nimport { useLocalStorageState } from './utils';\n\n// Styles\nimport { StyledApp } from './styles';\n\n// Content\nimport data from './content.json';\n\nfunction App(props) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [slidesData, setSlidesData] = useLocalStorageState('slides-data', data);\n  console.log('slidesData', slidesData);\n  return (\n    <ChakraProvider theme={theme}>\n      <StyledApp {...props}>\n        <Navbar />\n        <Box>\n          <Box>\n            <Carousel slidesData={slidesData} />\n          </Box>\n          <Box display=\"flex\" justifyContent=\"center\">\n            <Button onClick={onOpen} colorScheme=\"teal\" size=\"lg\">\n              Add\n            </Button>\n            <Button\n              isDisabled\n              ml={1}\n              colorScheme=\"teal\"\n              variant=\"outline\"\n              size=\"lg\"\n            >\n              Share\n            </Button>\n          </Box>\n        </Box>\n        <ModalAddWord\n          isOpen={isOpen}\n          onClose={onClose}\n          setSlidesData={setSlidesData}\n          slidesData={slidesData}\n        />\n      </StyledApp>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nexport function useLocalStorageState(\n  key,\n  defaultValue = '',\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {}\n) {\n  const [state, setState] = React.useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    if (valueInLocalStorage) {\n      // the try/catch is here in case the localStorage value was set before\n      // we had the serialization in place (like we do in previous extra credits)\n      try {\n        return deserialize(valueInLocalStorage);\n      } catch (error) {\n        window.localStorage.removeItem(key);\n      }\n    }\n    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n  });\n\n  const prevKeyRef = React.useRef(key);\n\n  React.useEffect(() => {\n    const prevKey = prevKeyRef.current;\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey);\n    }\n    prevKeyRef.current = key;\n    window.localStorage.setItem(key, serialize(state));\n  }, [key, state, serialize]);\n\n  return [state, setState];\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}